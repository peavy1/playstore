<resources>
    <string name="app_name">PlayStore</string>
    <string name="bottom_tab_game">게임</string>
    <string name="bottom_tab_app">앱</string>
    <string name="bottom_tab_search">검색</string>
    <string name="bottom_tab_book">도서</string>
    <!-- TODO: Remove or change this placeholder text -->
    <string name="hello_blank_fragment">Hello blank fragment</string>

    <string name="long_scrollable_text">
        스크롤 테스트를 위한 텍스트입니다. \n\n
        CoordinatorLayout은 자식 뷰 간의 복잡한 상호작용을 쉽게 만들어 줍니다.\n
        특히 머티리얼 디자인에서 많이 사용되는 스크롤 효과를 구현할 때 필수적입니다.\n\n
        AppBarLayout은 스크롤에 반응하는 상단 영역을 정의합니다.\n
        이 안에 Toolbar, TabLayout 등을 배치하여 함께 움직이게 할 수 있습니다.\n\n
        CollapsingToolbarLayout은 AppBarLayout 내부에서 실제로 접히는 효과를 담당합니다.\n
        layout_scrollFlags 속성을 통해 다양한 애니메이션을 지정할 수 있습니다.\n
        - scroll: 스크롤과 함께 움직입니다.\n
        - exitUntilCollapsed: 최소 높이가 될 때까지만 사라집니다.\n
        - enterAlways: 아래로 스크롤 시 바로 나타납니다.\n\n
        NestedScrollView는 CoordinatorLayout 내부에서 스크롤 이벤트를 올바르게 전달하기 위해 사용됩니다.\n
        일반 ScrollView를 사용하면 스크롤 연동이 제대로 동작하지 않을 수 있습니다.\n\n
        가장 중요한 연결고리는 바로 app:layout_behavior="@string/appbar_scrolling_view_behavior" 속성입니다.\n
        이 속성이 NestedScrollView의 스크롤 이벤트를 AppBarLayout에 전달하여 상단 뷰가 반응하게 만듭니다.\n\n
        이제 스크롤을 아래로 내려보세요.\n
        CollapsingToolbarLayout 영역이 부드럽게 사라지고 TabLayout만 상단에 고정되는 것을 볼 수 있습니다.\n\n
        다시 위로 스크롤하면 사라졌던 영역이 나타납니다.\n\n
        이것이 바로 구글 플레이스토어와 같은 앱에서 볼 수 있는 스크롤 기법의 기본 원리입니다.\n\n
        텍스트를 더 추가하여 스크롤 길이를 늘려보세요.\n
        텍스트를 더 추가하여 스크롤 길이를 늘려보세요.\n
        텍스트를 더 추가하여 스크롤 길이를 늘려보세요.\n
        텍스트를 더 추가하여 스크롤 길이를 늘려보세요.\n
        텍스트를 더 추가하여 스크롤 길이를 늘려보세요.\n
        텍스트를 더 추가하여 스크롤 길이를 늘려보세요.\n
        텍스트를 더 추가하여 스크롤 길이를 늘려보세요.\n
        테스트 종료.
    </string>


</resources>